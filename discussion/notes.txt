  /*******************/
 /   Memory          /
/___________________/

variable; int a  <-- integer (4byte)
          char c <-- character (1byte)
          long long d <--- long long (8byte)

1 byte = 8 bits

bit -- 0, 1 (binary digit) [base 2]

base 10  (decimal)---->
{0,1,2,3,4,5,6,7,8,9}

10 11 12 .. 19 20.. 99 100 

binary
**************

0, 1, 10, 11, 100, 101, 110, 111, 1000, ...

123 <--- ? [decimal]
3 * 1 + 2 * 10 + 1 * 100 = 123

... 10^3, 10^2,  10^1, 10^0  ==  1000s, 100s, 10s, 1s

[binary]

... 2^3, 2^2, 2^1, 2^0 == ... 8s, 4s, 2s, 1s


  /***************/
 /  Hexadecimal  /
/_______________/

base 16
{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}


Hexadecimal
-------------------------------------
9 (nine)
A (ten)
B (eleven)
...
...
F (fifteen)
10 (sixteen)
11 (seventeen)
12 (eighteen)
...
1A (twentysix)
-------------------------------------

... 16^3, 16^2, 16^1, 16^0


convention for writing hex numbers: 0x1, 0x2, 0x3,.. 0x12AB3, 0x10

illustration__________>
100 in hexadecimal = 0x64
255 in hexadecmial = 0xFF --> 15 * 16^1  +  15 * 16^0  = 240 + 15 = 255
255 in binary = 11111111 or 1111 1111 = F F

0000 -> 0x0
...
1111 -> 0xF


  /***************/
 /  declaration  /
/_______________/

int i = 9; (9 in binary 1001)
^-4 bytes = 4 * 8 bits = 32 bits

in memory 1 block represents 1 byte

illustration: 
address.c

two special operators for memory access (prefix to a variable)
& (amperesand)              [to find the address of a variable]
* (dereference, or star operator)       [to go to the address that is stored inside a variable]


  /***********/
 /  pointer  /
/___________/

pointer is a variable that contains the address of some other value (e.g. 9 in previous example)

declaration: 
int a = 9;
int *p = &a;    pointer to an integer
^-- in this case p is the pointer and a is the pointee

char *p <------ pointer to a character
float *p <----- pointer to a float

pointer takes 8 bytes in memory

illustration: pointer.c, pointer2.c


  /***********/
 /  STRING   /
/___________/

An array is a contiguous collection of homogeneous elements that can be accessed using an index. 

string is an array of characters
contiguous ->> back to back to back

illustration: string.c (taking reference from pointer.c)

string data type has variable size

int 4 bytes, char 1 byte, ...

string is a pointer to character

___________________
the NUL character '\0'

a string always terminates with a NUL character (\0)

illustration: strlen.c strlen_for.c (for finding out the length of string)

^--- this function is in string library (string.h)

toupper.c and toupper1.c for case changing of characters of string

swap.c


==============================================================================

sorting
unsorted[] = {8, 5, 4, 6, 1, 3, 2, 7}

sorting algorithms:
1) selection sort


2) bubble sort
3) mergesort


  /**************/
 /    Memory    /
/______________/


|**********************************|
|          Machine Code            | <---- programs' binary loaded here
|__________________________________|
|             Globals              | <---- global variables and constants are stored here
|__________________________________|
|               Heap               | <---- malloc, calloc etc. memory allocation (Dynamic memory allocation) e.g. char *s = malloc(4 * sizeof(char));
|                ||                |
|               \  /               |
|                \/                |
|                                  |
|                                  |
|                                  |
|                                  |
|                 /\               | 
|                /  \              |
|                 ||               |
|               Stack              | <---- all the local variables are stored here for funcitons called e.g. main(), and other funcitons
|__________________________________|


  /****************/
 /    Function    /
/________________/

data type--> int, double, float, char, long, ...

Function is a black box which takes some inputs operates on them and gives some output

            |*********|
input --->  |         |  ---> output
            |_________|


f(x) = sin(x)

C funcitons:

return_type fucntion_name(arguments)

return_type ---> int, float, char, long,...
arguments ---> whatever inputs the funtion takes

illustration: addition.c